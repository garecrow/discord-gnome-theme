@use "sass:string";
@use "util";

$osd_bg_color: rgb(0 0 0 / 70%);
$osd_fg_color: rgb(255 255 255 / 90%);
$osd-like-padding: 2px;

$toast_bg_color: #505053;
$toast_fg_color: white;

@mixin -bold-font {
	font-size: var(--document-font-size);
	font-weight: bold;
}

@mixin banner {
	@include -bold-font;

	--banner-color: #7d7d83;
	background-color: color-mix(
		in srgb,
		var(--banner-color) 30%,
		var(--window_bg_color)
	);
	color: var(--window_fg_color);
	padding: var(--spacing);

	* {
		font-size: inherit;
		font-weight: inherit;
	}

	svg {
		display: none;
	}
}

@mixin tooltip {
	// There is too much text, so blur here is fine
	backdrop-filter: blur(3px);
	background-color: rgba(0, 0, 0, 0.8);
	color: white;
	border: 1px solid rgba(255, 255, 255, 0.1);
	border-radius: 9px;
	box-shadow: none;
	padding: 6px 10px;
}

@mixin button {
	@include -bold-font;
	@include button-basic-raised;

	color: var(--window_fg_color);
	padding: 5px 10px;
	border: none;
	border-radius: var(--button_radius);

	min-width: 16px;
	min-height: 24px;
	height: 34px;

	* {
		font: inherit;
	}

	svg {
		display: none;
	}
}

@mixin button-accent {
	background-color: var(--accent-bg-color);
	color: var(--accent_fg_color);

	&:hover {
		background-color: color-mix(
			in srgb,
			var(--accent-bg-color) 95%,
			rgb(0, 0, 6)
		);
	}

	&:active {
		background-color: color-mix(
			in srgb,
			var(--accent-bg-color) 70%,
			rgb(0, 0, 6)
		);
	}
}

@mixin button-basic-raised($hover: ":hover", $active: ":active") {
	background-color: color-mix(in srgb, currentColor 10%, transparent);

	transition: var(--button_transition);

	&#{$hover} {
		background-color: color-mix(in srgb, currentColor 15%, transparent);
	}

	&#{$active} {
		background-color: color-mix(in srgb, currentColor 30%, transparent);
	}
}

@mixin button-selected {
	background-color: var(--selected_color);

	&:hover {
		background-color: var(--selected_hover_color);
	}

	&:active {
		background-color: var(--selected_active_color);
	}
}

@mixin icon-button($name: null, $size: null) {
	@if $name {
		--icon: icon(#{$name});
	}
	@if $size {
		--icon-button-size: #{$size};
	}

	@include button-basic-raised;

	background-color: transparent;
	border: none;
	border-radius: var(--button_radius);
	padding: 0;

	position: relative;
	width: var(--icon-button-size);
	height: var(--icon-button-size);

	&:disabled {
		opacity: var(--dim-level-opacity);
		background-color: transparent;
	}

	&::before {
		content: "";

		@include util.icon;

		position: absolute;
		inset: 0;
		width: 100%;
		height: 100%;
	}

	& > * {
		display: none;
	}
}

@mixin icon-button-circular($name: null) {
	@include icon-button($name);

	background-color: rgb(0 0 0 / 65%);
	color: white;
	border-radius: 999px;

	&:hover {
		background-color: color-mix(
			in srgb,
			black calc(0.85 * 65%),
			currentColor calc(0.15 * 65%)
		);
	}

	&:active {
		background-color: color-mix(
			in srgb,
			black calc(0.75 * 65%),
			currentColor calc(0.25 * 65%)
		);
	}
}

@mixin icon-button-with-tooltip(
	$name,
	$direction,
	$size: null,
	$selector: "> *",
	$overflow-workaround-direction: null
) {
	@include icon-button($name, $size);

	$id: --tooltip-#{string.unique-id()};
	$tooltip-h: 30px;
	$is-pseudo: $selector == "::after";
	$is-horizontal: $direction == "left" or $direction == "right";
	$direction-opposite: util.get-opposite-dir($direction);

	anchor-name: $id;

	&:hover#{$selector} {
		@include tooltip;
		@extend %text-normal;

		@if $is-pseudo {
			content: attr(aria-label);
		}

		display: block;
		position: fixed;
		position-anchor: $id;
		#{$direction-opposite}: calc(anchor(#{$direction}) + var(--spacing));
		z-index: 999;

		@if $is-horizontal {
			top: calc(anchor(top) + (var(--icon-button-size) - #{$tooltip-h}) / 2);
		}

		// Make the tooltip appear not centered, since it's prevented by various
		// "overflow: hidden" rules, and it's too risky reverting all of them
		#{$overflow-workaround-direction}: anchor(
			#{$overflow-workaround-direction}
		);

		pointer-events: none;
	}
}

@mixin osd-like-button {
	@include icon-button-circular;

	background-color: transparent;
}

@mixin osd-like-button-group {
	background-color: $osd_bg_color;
	color: $osd_fg_color;
	border-radius: 999px;
	padding: $osd-like-padding;
}

@mixin titlebar-button {
	@include icon-button($size: var(--titlebar-button-size));

	background-color: color-mix(in srgb, currentColor 10%, transparent);
	border-radius: 100%;
}

@mixin radio($radio-group, $item, $icon, $remove) {
	#{$radio-group} {
		gap: 0;
		border-radius: var(--card_radius);
		box-shadow: var(--elevation-medium);
	}

	#{$item} {
		@include card-in-container(
			$activatable: true,
			$first-selector: ":first-child",
			$last-selector: ":last-child"
		);

		box-shadow: none;
		gap: 16px;
		padding: 16px;
		margin: 0;

		&[aria-checked="true"] #{$icon} {
			background-color: #fff;
			border: 7px solid var(--accent-bg-color);
		}

		&[aria-checked="false"] #{$icon} {
			border: 2px solid color-mix(in srgb, currentColor 25%, transparent);
		}

		& > div {
			all: unset;
			gap: inherit;

			display: flex;
			align-items: center;
		}
	}

	#{$icon} {
		border-radius: 50%;

		// Needed for settings
		flex-shrink: 0;
		width: 22px;
		height: 22px;
	}

	#{$remove} {
		display: none;
	}
}

@mixin slider($bar, $bar-fill, $grabber) {
	#{$bar} {
		border-radius: 16px;

		top: 0;
		height: 4px;
	}

	#{$bar-fill} {
		background-color: var(--accent-bg-color);
	}

	#{$grabber} {
		background-color: #fff;
		border: none;
		border-radius: 50%;
		box-shadow:
			0 0 0 1px rgba(0, 0, 6, 0.1),
			0 2px 4px rgba(0, 0, 6, 0.2);
		margin: 0;
		margin-left: -10px;

		top: -8px;
		width: 20px;
		height: 20px;
	}
}

@mixin split-button($lhs, $rhs) {
	border-radius: var(--button_radius);

	transition: var(--button_transition);

	&:hover,
	&:active {
		background-color: var(--hover_color);

		#{$lhs}::after {
			background-color: transparent;
		}
	}

	#{$lhs},
	#{$rhs} {
		@include icon-button;

		background-color: transparent;
	}

	#{$lhs} {
		&::after {
			content: "";

			position: absolute;
			inset-inline-end: -1px;
			inset-block: var(--spacing);
			width: 1px;
			height: calc(100% - var(--spacing-2x));

			opacity: var(--dim-level-opacity);
			background-color: currentColor;
			transition: var(--button_transition);
		}
	}

	#{$rhs} {
		--icon: icon("pan-down");

		padding-left: 5px;
		padding-right: 5px;

		width: 24px;
	}
}

@mixin switch($checked) {
	--percentage: 15.25%;
	--spacing: var(--spacing-05x);
	--swatch-size: 20px;

	background-color: color-mix(
		in srgb,
		var(--window_fg_color) var(--percentage),
		transparent
	);
	border: none;
	padding: var(--spacing);

	width: calc(var(--swatch-size) * 2 + var(--spacing) * 2);
	height: calc(var(--swatch-size) + var(--spacing) * 2);

	&::before {
		content: "";

		display: block;
		width: var(--swatch-size);
		height: var(--swatch-size);

		background-color: #fff;
		border-radius: 14px;
		box-shadow: 0 2px 4px color-mix(in srgb, black 20%, transparent);

		transition: var(--switch-transition);
	}

	&:hover {
		--percentage: 22.5%;
	}

	&:active {
		--percentage: 8%;
	}

	&#{$checked} {
		background-color: var(--accent-bg-color);

		&::before {
			margin-left: var(--swatch-size);
			transition: var(--switch-transition);
		}

		&:hover {
			background-color: #4990e7;
		}

		&:active {
			background-color: #2a6ab6;
		}
	}
}

@mixin text-field {
	@include util.focus-ring;

	background-color: color-mix(
		in srgb,
		currentColor 10%,
		var(--window_bg_color)
	);
	font-size: var(--document-font-size);
	line-height: 1.2;
	border: none;
	border-radius: var(--button_radius);
	padding: 8px 9px;
	margin: 0;

	height: unset;

	&:disabled {
		opacity: var(--dim-level-opacity);
	}

	// TODO: maybe remove and --input-placeholder-text: var(--text-muted)
	&::placeholder {
		color: var(--text-muted);
		font-size: inherit;
		font-weight: inherit;
	}
}

@mixin toast {
	background: $toast_bg_color;
	color: $toast_fg_color;
	box-shadow:
		0 1px 3px 1px rgb(0 0 6 / 7%),
		0 2px 6px 2px rgb(0 0 6 / 3%);

	--standalone-color-oklab: max(l, 0.85) a b;

	--accent-color: oklab(
		from var(--accent-bg-color) var(--standalone-color-oklab)
	);
	--destructive-color: oklab(
		from var(--destructive-bg-color) var(--standalone-color-oklab)
	);
	--success-color: oklab(
		from var(--success-bg-color) var(--standalone-color-oklab)
	);
	--warning-color: oklab(
		from var(--warning-bg-color) var(--standalone-color-oklab)
	);
	--error-color: oklab(
		from var(--error-bg-color) var(--standalone-color-oklab)
	);

	margin: var(--spacing-2x);
	margin-bottom: calc(var(--spacing-2x) * 2);

	border-radius: 150px;
	padding: var(--spacing);
}

@mixin toggle-group {
	---group-padding: 3px;

	background: color-mix(in srgb, currentColor 10%, transparent);
	border-radius: var(--button_radius);
	padding: var(---group-padding);
}

@mixin toggle-group-toggle($checked) {
	transition: var(--toggle_transition);
	border-radius: calc(var(--button_radius) - var(---group-padding));
	font-weight: bold;
	padding-left: calc(11px - var(---group-padding));
	padding-right: calc(11px - var(---group-padding));

	display: flex;
	align-items: center;
	justify-content: center;
	position: relative;
	min-width: 34px;
	min-height: calc(34px - var(---group-padding) * 2);

	&:hover {
		background-color: var(--hover_color);
	}

	&:active {
		background-color: var(--active_color);
	}

	&#{$checked} {
		background-color: var(--active-toggle-bg-color);
		color: var(--active-toggle-fg-color);
		box-shadow:
			0 1px 3px 1px rgb(0 0 6 / 7%),
			0 2px 6px 2px rgb(0 0 6 / 3%);

		&:disabled {
			background-color: color-mix(
				in srgb,
				var(--active-toggle-bg-color) var(--disabled-opacity),
				transparent
			);
			box-shadow: none;
		}
	}

	&:not(:last-child) {
		---separator-opacity: 1;
		---separator-width: 1px;

		margin-right: var(---group-padding);

		&::after {
			content: "";

			position: absolute;
			right: calc(var(---group-padding) * -1);
			width: var(---separator-width);
			height: 100%;

			// TODO: dedi file
			$border_color: color-mix(in srgb, currentColor 25%, transparent);
			opacity: var(---separator-opacity);
			background-color: $border_color;
			margin: var(---group-padding) var(---separator-width);
		}

		@media not (prefers-reduced-motion) {
			&::after {
				transition: opacity 200ms var(--ease-out-quad);
			}
		}
	}

	&:is(:hover, #{$checked}, :has(+ &:is(:hover, #{$checked}))) {
		---separator-opacity: 0;
	}
}

// #region card
@mixin cards-container {
	border-radius: var(--card_radius);
	box-shadow: var(--elevation-medium);
}

@mixin card($activatable: false) {
	background-color: var(--card_bg_color);
	border: none;
	border-radius: var(--card_radius);
	box-shadow: var(--elevation-medium);
	padding: 10px 16px;

	min-height: calc(var(--icon-button-size) + 10px * 2);

	@if $activatable {
		transition: var(--backdrop_transition);

		&:hover {
			background-color: color-mix(
				in srgb,
				currentColor 3%,
				var(--card_bg_color)
			);
		}

		&:active {
			background-color: color-mix(
				in srgb,
				currentColor 8%,
				var(--card_bg_color)
			);
		}
	}
}

/// Children of a `cards-container`.
///
/// @param {boolean} $activatable
/// @param {string} $first-selector
/// @param {string} $last-selector
@mixin card-in-container($activatable: false, $first-selector, $last-selector) {
	@include card($activatable);

	border-bottom: 1px solid var(--card_shade_color);
	border-radius: 0;
	box-shadow: none;

	&#{$first-selector} {
		border-radius: var(--card_radius) var(--card_radius) 0 0;
	}

	&#{$last-selector} {
		border-radius: 0 0 var(--card_radius) var(--card_radius);
		border: none;
	}

	@if $first-selector == ":first-of-type" and $last-selector == ":last-of-type"
	{
		&:only-of-type {
			border-radius: var(--card_radius);
		}
	}
}
// #endregion
